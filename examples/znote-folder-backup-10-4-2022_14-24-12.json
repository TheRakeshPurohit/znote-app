[{"id":"a7bb6fca-feec-4d53-a5ad-153e9a286e8e","temp":true,"dirty":true,"lazy":false,"value":"---\ndescription: General Stuff\nauthor: Anthony\ndate: 20/03/2021\ntags: \n- tag1\n- tag2\nnumber_sections: true\n---\n\nGthub style YAML header\n\n","lock":false,"filename":"yaml header","tags":[],"project":"znote>demo","lastUpdatedTime":1661860234362,"pin":false,"cloud":false},{"id":"e8d2f98a-6ea6-482d-92f0-2560aedca10d","temp":true,"dirty":true,"lazy":false,"value":"## Population count\n```js\nconst r = await fetch('http://api.worldbank.org/v2/countries/USA/indicators/SP.POP.TOTL?per_page=5000&format=json')\nconst json = await r.json();\nconst result = json[1]\nawait printTable(result);\n//printJSON(result);\n```\n\n## Graph\n```js\n//hide\nasync function load(country) {\n  const r = await fetch('http://api.worldbank.org/v2/countries/'+country+'/indicators/SP.POP.TOTL?per_page=5000&format=json')\n  const json = await r.json();\n  const result = json[1].map(year => [year.date, year.value]);\n  return result;\n}\n\nconst usa = await load('USA');\nconst china = await load('CHN');\nconst india = await load('IND');\n\nconst data = [{\n  y: usa.map(r=>r[1]),\n  x: usa.map(r=>r[0]),\n  name: \"USA\",\n  type: 'scatter'\n},\n{\n  y: china.map(r=>r[1]),\n  x: china.map(r=>r[0]),\n  name: \"CHINA\",\n  type: 'scatter'\n},\n{\n  y: india.map(r=>r[1]),\n  x: india.map(r=>r[0]),\n  name: \"INDIA\",\n  type: 'scatter'\n}\n];\n\nconst layout = {\n  height: 400,\n  width: 500\n}\n\nPlotly.newPlot(el, data, layout);\n```","lock":false,"filename":"Population graph","tags":["#climat"],"project":"znote>demo","lastUpdatedTime":1661860279180,"pin":false,"cloud":false},{"id":"b8a29327-3bba-4d9d-81c3-1913c4864dd6","temp":true,"dirty":true,"lazy":false,"value":"## Global Temperature anomalies\n```js\nconst r = await fetch('https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/global/time-series/globe/land_ocean/ytd/12/1880-2016.json')\nconst json = await r.json();\n//printJSON(json);\nconst result = Object.entries(json.data).map(year => [year[0], year[1]]);\n\nconst data = [{\n  y: result.map(r=>r[1]),\n  x: result.map(r=>r[0]),\n  type: 'scatter'\n}];\n\nconst layout = {\n  title: \"World temperature anomalies\",\n  height: 400,\n  width: 500\n}\n\nPlotly.newPlot(el, data, layout);\n```\n\n\n## US Annual Average Temperature and Anomaly \n```js\nconst r = await fetch('https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/national/time-series/110-tavg-ytd-12-1895-2016.json?base_prd=true&begbaseyear=1901&endbaseyear=2000')\nconst json = await r.json();\n//printJSON(json);\nconst result = Object.entries(json.data).map(year => [year[0].substring(0,4), year[1].anomaly]);\nconst data = [{\n  y: result.map(r=>r[1]/1.8), // fahrenheit to celcius\n  x: result.map(r=>r[0]),\n  type: 'scatter'\n}];\n\nconst layout = {\n  title: \"US temperature anomalies (Celcius)\",\n  height: 400,\n  width: 500\n}\n\nPlotly.newPlot(el, data, layout);\n```\n\n## Europe average temperature anomalies\n```js\nconst r = await fetch('https://www.ncei.noaa.gov/cag/global/time-series/europe/land/1/7/1880-2022/data.json')\nconst json = await r.json();\n//printJSON(json);\nconst result = Object.entries(json.data).map(year => [year[0].substring(0,4), year[1]]);\nconst data = [{\n  y: result.map(r=>r[1]),\n  x: result.map(r=>r[0]),\n  type: 'scatter'\n}];\n\nconst layout = {\n  title: \"Europe temperature anomalies\",\n  height: 400,\n  width: 500\n}\n\nPlotly.newPlot(el, data, layout);\n```","lock":false,"filename":"Climate temp anomalies","tags":["#climat"],"project":"znote>demo","lastUpdatedTime":1661860229651,"pin":false,"cloud":false},{"id":"c9f12f8f-7b84-4ee0-b8ee-31ab14d7be9d","temp":true,"dirty":true,"lazy":false,"value":"## ISS position\n\n```js\nconst r = await fetch('http://api.open-notify.org/iss-now.json')\nconst json = await r.json();\n\nvar data = [{\n    type: 'scattergeo',\n    lon: [json.iss_position.longitude],\n    lat: [json.iss_position.latitude],\n    marker: {size: 13,},\n    name: 'ISS',\n}];\n\nvar layout = {\n    geo: {\n        scope: 'world',\n        resolution: 50,        \n        showland: true,\n        countrycolor: '#d3d3d3'\n    }\n};\n\nPlotly.newPlot(el, data, layout);\n```","lock":false,"filename":"ISS position","tags":[],"project":"znote>demo","lastUpdatedTime":1661860253486,"pin":false,"cloud":false},{"id":"c8e10afc-3f57-4b6c-b4ec-72c0a1ae4e9d","temp":true,"dirty":true,"lazy":false,"value":"## Random Cat PNG\n```js\nconst r = await fetch('https://cataas.com/cat', {cache: \"no-store\"})\nconst bytes = await r.arrayBuffer();\n\n// could be a custom function\nconst blob = new Blob([bytes], { type: \"image/png\" });\nconst imageUrl = URL.createObjectURL(blob);\nconst img = createElement(\"img\");\nimg.src = imageUrl;\nhtmlEl.innerHTML = \"\"; \nhtmlEl.append(img);\n```\n\n## Random Cat GIF\n```js\nconst r = await fetch('https://cataas.com/cat/gif', {cache: \"no-store\"})\nconst bytes = await r.arrayBuffer();\nawait printAsImage(bytes);\n```\n\n\n```\n//custom function\nasync function printAsImage(bytes) {\n  const blob = new Blob([bytes], { type: \"image/png\" });\n  const imageUrl = URL.createObjectURL(blob);\n  const img = createElement(\"img\");\n  img.src = imageUrl;\n  htmlEl.innerHTML = \"\"; \n  htmlEl.append(img);\n}\n```","lock":false,"filename":"Random Cat","tags":[],"project":"znote>demo","lastUpdatedTime":1661860238995,"pin":false,"cloud":false},{"id":"a8dea3a9-b786-43e1-b1fb-00e5d198fc40","temp":true,"dirty":true,"lazy":false,"value":"# SVG tester\n```html ubuntu\n<svg viewBox=\"-70 -70 140 140\">\n\n  <defs>\n    <path id=\"b\" d=\"M 23,-20 A32,32 0,0,0 -23,-20 L -40,-30 A42,42 0,0,1 -14,-47 A17,17 0,0,0 14,-47 A42,42 0,0,1 40,-30 Z\"/>\n    <circle id=\"h\" cx=\"0\" cy=\"-57\" r=\"12\"/>\n  </defs>\n\n  <g transform=\"translate(5,5)\" opacity=\"0.125\">\n    <use xlink:href=\"#h\" transform=\"rotate(30)\"/>\n    <use xlink:href=\"#h\" transform=\"rotate(150)\"/>\n    <use xlink:href=\"#b\" transform=\"rotate(30)\"/>\n    <use xlink:href=\"#h\" transform=\"rotate(-90)\"/>\n    <use xlink:href=\"#b\" transform=\"rotate(150)\"/>\n    <use xlink:href=\"#b\" transform=\"rotate(-90)\"/>\n  </g>\n\n  \n  <use xlink:href=\"#h\" fill=\"#d00\" transform=\"rotate(30)\"/>\n  <use xlink:href=\"#b\" fill=\"#f40\" transform=\"rotate(30)\"/>\n  <use xlink:href=\"#h\" fill=\"#f80\" transform=\"rotate(150)\"/>\n  <use xlink:href=\"#b\" fill=\"#d00\" transform=\"rotate(150)\"/>\n  <use xlink:href=\"#h\" fill=\"#f40\" transform=\"rotate(-90)\"/>\n  <use xlink:href=\"#b\" fill=\"#f80\" transform=\"rotate(-90)\"/>\n\n\n</svg>\n```\n\n```html android\n<svg viewBox=\"0 0 96 105\">\n  <g fill=\"#97C024\" \n    stroke=\"#97C024\" \n    stroke-linejoin=\"round\" \n    stroke-linecap=\"round\">\n    <!-- body -->\n    <path d=\"M14,40v24M81,40v24M38,68v24M57,68v24M28,42v31h39v-31z\" stroke-width=\"12\"/>\n    <!-- ears -->\n    <path d=\"M32,5l5,10M64,5l-6,10 \" stroke-width=\"2\"/>\n  </g>\n\n  <!-- head -->\n  <path d=\"M22,35h51v10h-51zM22,33c0-31,51-31,51,0\" fill=\"#97C024\"/>\n  <!-- eyes -->\n  <g fill=\"#FFF\">\n    <circle cx=\"36\" cy=\"22\" r=\"2\"/>\n    <circle cx=\"59\" cy=\"22\" r=\"2\"/>\n  </g>\n</svg>\n```\n\n```html rubyforge\n<svg viewBox=\"0 0 100 100\">\n  <path d=\"M16,22l40,-14l33,28l-10,42l-40,14l-32-28z\" stroke=\"#000\" stroke-width=\"2\" fill=\"#e82323\"/>\n  <path d=\"M19,25l36,-12l28,24 c-12,49 -45,-15 -62,32 l-10-6z\" fill=\"#edc6c6\"/>\n</svg>\n```\n\n```js\nprint(loadBlock('rubyforge')) // try: ubuntu/android/rubyforge\n```","lock":false,"filename":"SVG tester","tags":[],"project":"znote>demo","lastUpdatedTime":1661860248862,"pin":false,"cloud":false},{"id":"21034ee5-5d61-40d5-8ff6-47de907516b2","temp":true,"dirty":true,"lazy":false,"value":"# Ray.so\nCreate beautiful code image\n\n```js code\nconst array1 = [1, 4, 9, 16];\nconst map1 = array1.map(x => x * 2)\nconsole.log(map1)\n```\n\n```js\nconst COLORS=\"midnight\" \nconst BACKGROUND=\"true\"\nconst DARK_MODE=\"true\"\nconst PADDING=\"64\"\nconst LANGUAGE=\"auto\"\nconst TITLE=\"Untitled-1\"\nconst CODE=btoa(loadBlock(\"code\"))\nopen(`https://ray.so/?colors=${COLORS}&background=${BACKGROUND}&darkMode=${DARK_MODE}&padding=${PADDING}&title=${TITLE}&code=${CODE}&language=${LANGUAGE}`)\n```","lock":false,"filename":"Ray.so code image","tags":[],"project":"znote>demo","lastUpdatedTime":1661860323736,"pin":false,"cloud":false},{"id":"2df43a2b-6672-44d7-92e0-445d9e089a25","temp":true,"dirty":true,"lazy":false,"value":"## Active fires in the World\nIn this notebook we use the **last 7d of active fires**. \n\n**Where get data?**\nYou can ask a specific location in history with the links below:\n[Last fires data](https://firms.modaps.eosdis.nasa.gov/active_fire/#firms-txt)\n[Ask archives data](https://firms.modaps.eosdis.nasa.gov/download/create.php)\n\nGlobals **vars** and **functions** *(play me before others blocks)*\n```js\n//global 1\n//hide\nconst basePath = \"/Users/alagrede/Desktop/znote/znote-public-github/examples/data/\"; // change me!\n\n// custom functions\nasync function listDays(start, end) {\n    for(var arr=[], dt=new Date(start); \n            dt<=new Date(end); \n            dt.setDate(dt.getDate()+1)){\n        arr.push(new Date(dt).toISOString().slice(0,10));\n    }\n    return arr;\n}\n\nasync function sleep(time) {\n  await new Promise(r => setTimeout(r, time));\n}\n```\n\n**Download the last 7 days into a file**\n```js\nconst r = await fetch('https://firms.modaps.eosdis.nasa.gov/data/active_fire/modis-c6.1/csv/MODIS_C6_1_Global_7d.csv')\nconst content = await r.text();\n_fs.writeFileSync(basePath + 'modis-active-fire.csv', content);\nprint(\"Done!\");\n```\n\nShow data\n```js\nconst df = await dfd.readCSV(\"https://firms.modaps.eosdis.nasa.gov/data/active_fire/modis-c6.1/csv/MODIS_C6_1_Global_7d.csv\");\nprint(df.ctypes);\n```\n\n\n## Active fires on the world map\nShow last **7 days** of active fires\n```js\n//hide\nconst last7d = basePath + \"modis-active-fire.csv\";\nconst content = _fs.readFileSync(last7d, 'utf8');\n\nfunction show(date) {\n    const latLong = content.split('\\n').filter(r=>String(r.split(\",\")[5]).startsWith(date)).map(r => [r.split(\",\")[0], r.split(\",\")[1]]) // lat/long\n    latLong.shift(); // remove header\n\n    var data = [{\n        type: 'scattergeo',\n        lon: latLong.map(r=>r[1]),\n        lat: latLong.map(r=>r[0]),\n        marker: {size: 2, color:'red'},\n    }];\n\n    var layout = {\n        geo: {\n            // Africa\n            //center: { lat: -16.400190, lon: 22.515316},\n            //projection: {\n            //    scale: 1.5\n            //},\n            scope: 'world', // \"africa\" | \"asia\" | \"europe\" | \"north america\" | \"south america\" | \"usa\" | \"world\"\n            resolution: 50,\n            showland: true,\n            showocean: true,\n            //bgcolor:\"#46484A\",\n        },\n        title: date,\n        //paper_bgcolor:\"#46484A\",\n    };\n\n    Plotly.newPlot(el, data, layout);\n}\n\nconst today = new Date(); // new Date(\"2022-08-24\")\nconst lastWeek = new Date();\nlastWeek.setDate(today.getDate()-7); // new Date(\"2022-08-18\") \n\nvar daylist = await listDays(\n    lastWeek,\n    today);\n\nfor(const day of daylist) {\n    show(day);\n    await sleep(500);  \n}\n```\n\n## France\n### Evolution of active fires in france from 2001 to today\n```js\n//hide\n// All France fires\nconst allfires = basePath + \"fire_archive_M-C61_290304.csv\";\nconst content = _fs.readFileSync(allfires, 'utf8');\nconst activeFires = content.split('\\n');\nactiveFires.shift();\nconst count = activeFires\n    // map to month\n    .map(r=>String(r.split(\",\")[5]).slice(0,7)) // date field like 2008-08\n    // map to year\n    //.map(r=>String(r.split(\",\")[5]).slice(0,4)) // date field like 2008\n    // group by\n    .reduce((total, value) => {\n        total[value] = (total[value] || 0) + 1;\n        return total;\n    }, {});\n\n\nconst data = [{\n  y: Object.values(count),\n  x: Object.keys(count),\n  type: 'scatter'\n}];\n\nconst layout = {\n  title: \"Evolution of active fires in france\",\n  height: 400,\n  width: 500\n}\n\nPlotly.newPlot(el, data, layout);\n```\n\n\n\n","lock":false,"filename":"Active fires","tags":["#climat"],"project":"znote>demo","lastUpdatedTime":1664271289853,"pin":false,"cloud":false},{"id":"390c5a11-e6da-452f-aea1-c152ad83b004","temp":true,"dirty":true,"lazy":false,"value":"# D3 World map\n\n```js\nimport { select, create, json, geoPath, geoNaturalEarth1 } from 'd3';\nimport { feature } from 'topojson';\n\nconst svg = create(\"svg\");\nsvg.attr(\"width\", \"100%\")\nsvg.attr(\"height\", \"500px\")\n\nconst projection = geoNaturalEarth1();\nconst pathGenerator = geoPath().projection(projection);\n\nsvg.append('path')\n    .style(\"fill\", \"#4242e4\")\n    .attr('d', pathGenerator({type: 'Sphere'}));\n\n\njson('https://unpkg.com/world-atlas@1.1.4/world/110m.json')\n.then(data => {\n    const countries = feature(data, data.objects.countries);\n    svg.selectAll('path').data(countries.features)\n    .enter().append('path')\n        .style(\"fill\", \"lightgreen\")\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-opacity\", \"0.1\")\n        .attr('d', pathGenerator);\n    print(svg.node().outerHTML)\n});\n```","lock":false,"filename":"D3 Globe","tags":[],"project":"znote>demo","lastUpdatedTime":1663050462460,"pin":false,"cloud":false},{"id":"3a770381-3b1b-4657-8795-31d73e8e8e44","temp":true,"dirty":true,"lazy":false,"value":"\n## Make SQL query\n\n[Blog 💡: Use Znote as SQL client](https://blog.znote.io/2021/sql-functions/)\n\n### Install NPM packages\nInstall SQL driver for your database\n```bash\nnpm install --save mysql2\n```\n\nInstall tablify to read results as table\n```bash\nnpm install --save tablify\n```\n\n### Create SQL functions\nCreate these 2 functions *f(x)* below to connect to your database and tablify results\n```\n// custom functions\nasync function localSQL(sqlQuery) {\n  const { Sequelize } = require('sequelize');\n  const sequelize = new Sequelize(\"\", \"root\", \"root\", {  \n    dialect: \"mysql\"/* one of 'mysql' | 'mariadb' | 'postgres' | 'mssql' */,\n    host: \"localhost\"\n  });\n\n  sequelize.authenticate();\n  const [results, metadata] = await sequelize.query(sqlQuery);\n  \n  sequelize.close()\n  return results;\n}\n\nasync function printSQL(sqlQuery) {\n  const tablify = require('tablify').tablify\n  print(tablify(await localSQL(sqlQuery)));\n}\n```\n\n### Make SQL query on your database\n```js\nawait printSQL(\"select * from book.vente_item limit 10\");\n```","lock":false,"filename":"SQL demo","tags":[],"project":"znote>demo","lastUpdatedTime":1664092103584,"pin":false,"cloud":false},{"id":"46481d06-2e40-4be0-b040-2f39630984eb","temp":true,"dirty":true,"lazy":false,"value":"```js\n//hide\nawait printSQL(\"select * from book.vente_item limit 20 offset 1\");\n```","lock":false,"filename":"SQL exploration","tags":["#guide"],"project":"znote>demo","lastUpdatedTime":1664274783623,"pin":false,"cloud":false},{"id":"c7fc63bd-44f6-4967-a384-c6f4c8b98dc8","temp":true,"dirty":true,"lazy":false,"value":"\n# Use P5\nhttps://p5js.org/\n\nIn the **Package** popup add: \nname:`p5`\nurl:`https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.2/p5.min.js`\n\n**P5** is used here in [instance mode](https://github.com/processing/p5.js/wiki/Global-and-instance-mode)\n\n\n```js scripts=p5\n//hide\nconst s = p => {\n\n  p.setup = function() {\n    const canvas = p.createCanvas(700, 410);\n  };\n\n  p.draw = function() {\n    p.background(0);\n    p.fill(255);\n    p.rect(p.mouseX, p.mouseY, 50, 50);\n  }\n};\n\nhtmlEl.innerHTML = '' // reset result div before to load P5\nconst P5 = new p5(s, htmlEl); // htmlEl is the \n```","lock":false,"filename":"P5 demo","tags":[],"project":"znote>demo","lastUpdatedTime":1664886179635,"pin":false,"cloud":false}]